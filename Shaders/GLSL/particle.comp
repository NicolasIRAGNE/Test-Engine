#version 450

struct Particle
{
	vec3 position;
	vec3 velocity;
	vec4 color;
};

layout(push_constant) uniform constants
{
    float deltaTime;
} pushConstants;

layout(std140, binding = 0) readonly buffer ParticleSSBOIn
{
   Particle particlesIn[ ];
};

layout(std140, binding = 1) buffer ParticleSSBOOut
{
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
	uint id = gl_GlobalInvocationID.x;

	Particle particleIn = particlesIn[id];
	particlesOut[id].position = particleIn.position + particleIn.velocity * pushConstants.deltaTime;
	particlesOut[id].velocity = particleIn.velocity;

	if ((particlesOut[id].position.x <= -1.0) || (particlesOut[id].position.x >= 1.0))
	{
        particlesOut[id].velocity.x = -particlesOut[id].velocity.x;
    }
	if ((particlesOut[id].position.y <= -1.0) || (particlesOut[id].position.y >= 1.0))
	{
        particlesOut[id].velocity.y = -particlesOut[id].velocity.y;
    }
    if ((particlesOut[id].position.z <= -1.0) || (particlesOut[id].position.z >= 1.0))
	{
        particlesOut[id].velocity.z = -particlesOut[id].velocity.z;
    }
}